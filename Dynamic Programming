int Fibonacci(n)  \\n->number of terms
    1 set fib[0] = 0
    2 set fib[1] = 1
    3 for i from 2 to n
    4     fib[i] = fib[i-1] + fib[i-2]
    5 return fib[n]

int  CoinRow(coins) \\coins->Array of coins
    1 Initialize an array F of size n + 1
    2 Set F[0] = 0
    3 Set F[1] = coins[0]
    4 For i from 2 to n
    5     F[i] = max(coins[i-1] + F[i-2], F[i-1])
    6 End For
    7 Return F[n]
    8 End Function


int coinchange(d[], n, m)  //d->denominations, n->amount, m->no of coins
    1 initialize arrays f[n+1] and b[n+1]
    2 set f[0] = 0 and b[0] = -1
    3 for i from 1 to n
    4     set temp = infinity, b = -1
    5     for j from 0 to m-1
    6         if i >= d[j] and temp > f[i - d[j]]
    7             temp = f[i - d[j]], b = j
    8     set f[i] = temp + 1, b[i] = b
    9 print array f
    10 print array b
    11 set s = f[n], create array arr of size s, k = 0
    12 while n > 0 and k < s
    13     coinindex = b[n]
    14     set c = d[coinindex], arr[k] = c
    15     n = n - c, k = k + 1
    16 print "the coins used are:" and array arr

int coincollect(c[][]) //c->matrix of coins
    1 initialize f[5][6]
    2 for i from 0 to 4
    3     for j from 0 to 5
    4         set f[i][j] = c[i][j]
    5 for j from 1 to 5
    6     set f[0][j] = c[0][j] + f[0][j-1]
    7 for i from 1 to 4
    8     set f[i][0] = c[i][0] + f[i-1][0]
    9 for i from 1 to 4
    10    for j from 1 to 5
    11        set temp = max(f[i][j-1], f[i-1][j])
    12        set f[i][j] = temp + c[i][j]
    13 return f[4][5]
int mcp(mat, n, c)  //mat->matrix of path costs, n->rows, c->columns
    1 initialize f[n][c] by copying mat to f
    2 f[0][0] = mat[0][0]
    3 for i from 0 to n-1
    4     for j from 0 to c-1
    5         if i == 0 and j > 0
    6             f[i][j] = f[i][j-1] + mat[i][j]
    7         else if j == 0 and i > 0
    8             f[i][j] = f[i-1][j] + mat[i][j]
    9         else if i > 0 and j > 0
    10            f[i][j] = min(f[i-1][j], f[i][j-1], f[i-1][j-1]) + mat[i][j]
    11 i = n-1, j = c-1, b = empty array, ind = 0
    12 b[ind++] = mat[i][j]
    13 while i > 0 or j > 0
    14     if i > 0 and j > 0 and f[i][j] == f[i-1][j-1] + mat[i][j]
    15         i--, j--
    16     else if i > 0 and f[i][j] == f[i-1][j] + mat[i][j]
    17         i--
    18     else
    19         j--
    20 print "path:" and elements of b in reverse order
    21 return f[n-1][c-1]

int knapsack(n, c, w[], v[]) //c->capacity, n->number of items, w->weights, v->values
    1 mat ← create 2d array of size (n+1) x (c+1)
    2 for i from 0 to n:
    3     mat[i][0] = 0
    4 for i from 0 to c:
    5     mat[0][i] = 0
    6 for i from 1 to n:
    7     for j from 1 to c:
    8         if j - w[i - 1] >= 0:
    9             mat[i][j] = max(mat[i - 1][j], v[i - 1] + mat[i - 1][j - w[i - 1]])
    10         else:
    11             mat[i][j] = mat[i - 1][j]
    12 include_items ← array of size n
    13 index ← 0
    14 cap ← c
    15 for i from n down to 1:
    16     if mat[i][cap] != mat[i - 1][cap]:
    17         include_items[index++] = i - 1
    18         cap = cap - w[i - 1]
    19 return mat[n][c]

void lcs(s1, s2) //strings
    1. rows ← length of s1 + 1
    2. cols ← length of s2 + 1
    3. mat ← create 2d array of size rows x cols
    4. for i from 0 to rows:
    5.   mat[i][0] ← 0
    6.   for i from 0 to cols:
    7.     mat[0][i] ← 0
    8. for i from 1 to rows - 1:
    9.   for j from 1 to cols - 1:
    10.    if s1[i - 1] == s2[j - 1]:
    11.       mat[i][j] ← mat[i - 1][j - 1] + 1
    12.     else:
    13.       mat[i][j] ← max(mat[i - 1][j], mat[i][j - 1])
    14. s ← mat[rows - 1][cols - 1]
    15. arr ← array of size s + 1
    16. r ← rows - 1
    17. c ← cols - 1
    18. d ← s - 1
    19. arr[s] ← '\0'
    20. while r > 0 and c > 0:
    21.   if s1[r - 1] == s2[c - 1]:
    22.     arr[d--] ← s2[c - 1]
    23.     r ← r - 1
    24.     c ← c - 1
    25.   else:
    26.     if mat[r - 1][c] > mat[r][c - 1]:
    27.       r ← r - 1
    28.     else:
    29.       c ← c - 1
    30. print "path"
    31. print arr as a string
    32. return mat[rows - 1][cols - 1]
    
